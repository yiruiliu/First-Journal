# [1,1,0,1,0,1] from LSB(left) to MSB(right)
set2intBinary:=function(s)
local ans,i;
ans := 0;
for i in [1..Length(s)] do
  if s[i] > 0 then
  ans := ans + 2^(i - 1);
  fi;
od;
return ans;
end;

## generate all binary list: [1,0,1,1] from LSB(left) to MSB(right)
BinaryList:=function(len)
local g,i,bin,binList,orbi;
g := SymmetricGroup(len);
bin := ZeroMutable([1..len]);
binList := [];
Append(binList,[ZeroMutable([1..len])]);
for i in [1..len - 1] do
  bin[i] := 1;
  orbi := Orbit(g,bin,Permuted);
  Append(binList,orbi);
od;
Append(binList,[ZeroMutable([1..len])+1]);
return binList;
end;

## Joint PMF of binary RVs on to two set of marginals 
## carTotal, car1, car2: cardinality of big set, cardinality of set 1, cardinality of set 2. For example, 
## (5,4,3) corresponds to {1,..,5}, {1,..,4}, {3,..,5}
PMFbigWithLeadingZeros:=function(carTotal,car1,car2)
local A, b, vec1, vec2, copyvec1, copyvec2, linrows, i, equal;
A := [];
b := [];
linrows := [];
vec1 := ZeroMutable( [ 1 .. 2 ^ car1 + 2 ^ car2 ] );
vec2 := ZeroMutable( [ 1 .. 2 ^ carTotal ] );
for i in [ 1 .. 2 ^ carTotal ] do
  copyvec1 := ShallowCopy( vec1 );
  copyvec2 := ShallowCopy( vec2 );
  copyvec2[ i ] := -1;
  Append( copyvec1, copyvec2 );
  Append( A, [ copyvec1 ] );
  Append( b, [0] );
od;
equal := ZeroMutable( [ 1 .. 2 ^ car1 + 2 ^ car2 + 2 ^ carTotal ] ) + 1;
Append( A, [ equal ] );
Append( b, [ 1 ] );
Append( linrows, [ Length(A) ] );
return [ A, b, linrows];
end;

ExtraDimensions := function ( A, b, linrows, carTotal, car1, car2)
local vec1, vec2, copyvec1, copyvec2, orbit1, helporbit1, orbit2, helporbit2, i, ins,
index1, help, inscopy, index2, k, len1, help2;
vec1 := ZeroMutable( [ 1 .. 2 ^ car1 + 2 ^ car2 ] );
vec2 := ZeroMutable( [ 1 .. 2 ^ carTotal ] );
orbit1 := BinaryList( car1 );
orbit2 := BinaryList( car2 );
helporbit1 := BinaryList( carTotal - car1 );
helporbit2 := BinaryList( carTotal - car2 );
k := Length( b );
for ins in orbit1 do
  copyvec1 := ShallowCopy( vec1 );
  copyvec2 := ShallowCopy( vec2 );
  index1 := set2intBinary( ins ) + 1;
  copyvec1[ index1 ] := 1;
  for help in helporbit1 do
    inscopy := ShallowCopy( ins );
    Append( inscopy, help );
    index2 := set2intBinary( inscopy ) + 1;
    copyvec2[ index2 ] := -1;
  od;
  Append( copyvec1, copyvec2 );
  Append( A, [copyvec1] );
  Append( b, [ 0 ] );
  k := k + 1;
  Append( linrows, [ k ] );
od;
len1 := 2 ^ car1;
for ins in orbit2 do
  copyvec1 := ShallowCopy( vec1 );
  copyvec2 := ShallowCopy( vec2 );
  index1 := set2intBinary( ins ) + 1 + len1;
  copyvec1[ index1 ] := 1;
  for help in helporbit2 do
    help2 := ShallowCopy(help);
    inscopy := ShallowCopy( ins );
    Append(help2, inscopy);
    index2 := set2intBinary( help2 ) + 1;
    copyvec2[ index2 ] := -1;
  od;
  Append( copyvec1, copyvec2 );
  Append( A, [copyvec1] );
  Append( b, [ 0 ] );
  k := k + 1;
  Append( linrows, [ k ] );
od;
return[A, b, linrows];
end;
