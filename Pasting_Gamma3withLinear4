set2int := function ( s )
    local  i, j, S;
    i := 0;
    S := Set(s);
    for j  in S  do
        i := i + 2 ^ (Int( j ) - 1);
    od;
    return i;
end;

IAandB := function(A,B,N) # transform I(A;B) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A])] := 1;
    lin[set2int([B])] := 1;
    lin[set2int([A,B])] := -1;
    return lin;
end;

IAandBGivenC := function(A,B,C,N) # transform I(A;B|C) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,C])] := 1;
    lin[set2int([B,C])] := 1;
    lin[set2int([A,B,C])] := -1;
    lin[set2int([C])] := -1;
    return lin;
end;

IAandBGivenGandD := function(A,B,C,D,N) # transform I(A;B|C,D) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,C,D])] := 1;
    lin[set2int([B,C,D])] := 1;
    lin[set2int([A,B,C,D])] := -1;
    lin[set2int([C,D])] := -1;
    return lin;
end;

IAandBcapC := function(A,B,C,N) # transform I(A;B,C) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A])] := 1;
    lin[set2int([B,C])] := 1;
    lin[set2int([A,B,C])] := -1;
    return lin;
end;

IAcapBandCGivenD := function(A,B,C,D,N) # transform I(A,B;C|D) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,B,D])] := 1;
    lin[set2int([C,D])] := 1;
    lin[set2int([A,B,C,D])] := -1;
    lin[set2int([D])] := -1;
    return lin;
end;

IAcapBandCcapD := function(A,B,C,D,N) # transform I(A,B;C,D) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,B])] := 1;
    lin[set2int([C,D])] := 1;
    lin[set2int([A,B,C,D])] := -1;
    return lin;
end;



DFZ1 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(C,D,E,N) - IAandB(A,E,N);
    return ine;
end;

DFZ2 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) -  IAandBGivenC(A,B,C,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(A,D,E,N) - IAandB(B,E,N);
    return ine;
end;

DFZ3 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(B,E,C,N) - IAandBGivenGandD(A,D,C,E,N);
    return ine;
end;

DFZ4 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenGandD(A,B,D,E,N) - IAandBGivenC(B,D,C,N) - IAandBGivenGandD(A,E,C,D,N);
    return ine;
end;


DFZ5 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(B,D,C,N) - IAandBGivenC(A,E,D,N) -  IAandBGivenGandD(A,B,C,E,N) - IAandBGivenGandD(B,C,D,E,N);
    return ine;
end;

DFZ6 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(B,D,E,N) - IAandBGivenC(D,E,C,N) - IAandBGivenGandD(A,B,C,D,N) - IAandBGivenGandD(A,C,D,E,N);
    return ine;
end;

DFZ7 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(A,E,C,N) - IAandB(B,D,N) - IAandBGivenGandD(B,D,C,E,N) - IAandBGivenGandD(A,B,D,E,N);
    return ine;
end;

DFZ8 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := 2*IAandB(A,B,N) -  IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,B,E,N) - IAandB(C,D,N) - IAandBcapC(E,C,D,N);
    return ine;
end;


DFZ9 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := 2*IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,B,E,N) - IAandB(D,E,N) - IAcapBandCGivenD(D,E,B,C,N);
    return ine;
end;

DFZ10 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := 2*IAandB(A,B,N) - IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandB(C,D,N) - IAandB(A,E,N) - IAandBGivenC(B,D,E,N) - IAandBGivenGandD(A,C,D,E,N);
    return ine;
end;

DFZ11 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandBGivenGandD(A,C,B,D,N) - IAandBcapC(A,C,E,N) - IAandBGivenGandD(A,B,D,E,N) - IAandBGivenGandD(B,D,C,E,N);
    return ine;
end;

DFZ12 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandB(A,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,D,E,N) - IAandBGivenC(B,E,C,N) - IAandBGivenGandD(A,C,B,E,N) - IAandBGivenGandD(C,E,B,D,N); 
    return ine;
end;


DFZ13 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandBcapC(A,C,E,N) - IAandBGivenGandD(B,D,C,E,N) - IAandBGivenGandD(A,C,B,E,N) - IAandBGivenGandD(C,E,B,D,N);
    return ine;
end;

DFZ14 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandB(A,D,N) - IAandBGivenC(B,E,D,N) - IAandBGivenGandD(A,B,C,E,N) - IAandBGivenGandD(A,C,B,D,N) - IAandBGivenGandD(A,C,D,E,N);
    return ine;
end;

DFZ15 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandB(A,D,N) - IAandBGivenC(B,E,D,N) - IAandBGivenC(A,C,E,N) - IAandBGivenGandD(A,B,C,D,N) - IAandBGivenGandD(A,C,B,D,N) - IAandBGivenGandD(B,D,C,E,N);
    return ine;
end;

DFZ16 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) -  IAandBGivenGandD(A,B,C,D,N) - IAandBGivenGandD(A,C,B,D,N) - IAcapBandCGivenD(B,C,D,E,N) - IAandBGivenGandD(B,C,D,E,N) - IAandB(A,E,N);
    return ine;
end;

DFZ17 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine :=  IAcapBandCcapD(A,B,C,D,N) - IAandBcapC(D,A,B,N) - IAandBGivenGandD(A,D,B,C,N) - IAandBGivenGandD(B,D,A,C,N) - IAandBGivenGandD(A,C,B,E,N) - IAandBGivenGandD(B,C,A,E,N) - IAandBGivenGandD(A,B,D,E,N) - IAandBGivenC(C,E,D,N); 
    return ine;
end;

DFZ18 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) + IAandB(A,C,N) - IAandB(B,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(B,D,E,N) - IAandBGivenC(C,D,E,N) - IAandB(A,E,N);
    return ine;
end;

DFZ19 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) + IAandB(A,C,N) - IAandB(B,D,N) - 2*IAandBGivenC(A,C,D,N) - IAandBGivenC(A,B,E,N) - IAandB(D,E,N) - IAandBGivenGandD(B,E,C,D,N) - IAandBGivenGandD(C,D,B,E,N); 
    return ine;
end;

DFZ20 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) + IAandB(A,C,N) - IAandB(B,C,N) - IAandB(B,D,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(A,B,E,N) - IAandBGivenC(A,E,B,N) - IAandBGivenC(C,D,E,N) - IAandBGivenGandD(B,E,C,D,N);
    return ine;
end;

DFZ21 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) + IAandB(A,C,N) - IAandB(B,D,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(A,D,E,N) - IAandB(C,E,N) - IAandBGivenGandD(A,B,C,E,N) - IAandBGivenGandD(B,C,D,E,N) - IAandBGivenGandD(B,E,C,D,N);
    return ine;
end;

DFZ22 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := 2 * IAandB(A,B,N) + IAandB(A,C,N) - IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandB(C,D,N) - IAandBGivenC(A,C,E,N) - IAandBGivenC(A,D,E,N) - 2 * IAandB(B,E,N) - IAandBGivenGandD(B,C,D,E,N) - IAandBGivenGandD(C,E,B,D,N);
    return ine;
end;

DFZ23 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) + IAandBcapC(A,B,C,N) - IAandBGivenC(A,B,D,N) - 2 * IAandBGivenC(A,C,E,N) - IAandB(B,E,N) - IAandB(D,E,N) - IAandBGivenGandD(A,B,C,D,N) - 2 * IAandBGivenGandD(B,D,C,E,N) - IAandBGivenGandD(C,E,B,D,N); 
    return ine;
end;

DFZ24 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,C,D,N) + IAandBcapC(B,C,D,N) - IAandB(B,D,N) - IAandBGivenC(B,C,E,N) - IAandBGivenC(C,E,D,N) - IAandB(A,E,N) - IAandBGivenGandD(A,C,B,D,N) - IAcapBandCGivenD(A,B,D,C,N) - IAandBGivenGandD(A,D,B,E,N) - IAandBGivenGandD(A,B,D,E,N);
    return ine;
end;

DFZPermutations := function(OrbvarList,DFZfunc)
    local ineList, l, ine;
    ineList := [];
    for l in OrbvarList do
        ine := DFZfunc(l[1],l[2],l[3],l[4],l[5],5);
        if not ine in ineList then 
            Append(ineList,[ine]);
        fi;
    od;
    return ineList;
end;


DFZ24Allpermutations := function()
    local varList,G,OrbvarList,Dfinal,D;
    varList :=[1,2,3,4,5];
    G := SymmetricGroup(5);
    OrbvarList := Orbit(G,varList,OnTuples);
    Dfinal := [];
    D := DFZPermutations(OrbvarList,DFZ1);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ2);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ3);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ4);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ5);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ6);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ7);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ8);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ9);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ10);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ11);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ12);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ13);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ14);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ15);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ16);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ17);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ18);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ19);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ20);
    Append(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ21);
    Dfinal:=Union(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ22);
    Dfinal:=Union(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ23);
    Dfinal:=Union(Dfinal,D);
    D := DFZPermutations(OrbvarList,DFZ24);
    Dfinal:=Union(Dfinal,D);
    return Dfinal;
end;

### All RVs Permuations of Ingleton5
In5_1 := function(A,B,C,D,E,N)
    local ine;
    ine := IAandB(A,B,N) -  IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandB(C,D,N);
    return ine;
end;

In5_2 := function(A,B,C,D,E,N)##ERROR
    local ine;
    ine := IAandBcapC(B,A,E,N) - IAcapBandCGivenD(A,E,B,C,N) - IAcapBandCGivenD(A,E,B,D,N) - IAandB(C,D,N);
    return ine;
end;

In5_3 := function(A,B,C,D,E,N)
    local ine;
    ine := IAandB(A,B,N) - IAandBGivenGandD(A,B,C,E,N) - IAandBGivenC(A,B,D,N) - IAandBcapC(D,C,E,N);
    return ine;
end;


InglPermutations := function(OrbvarList,Infunc)
    local ineList, l, ine;
    ineList := [];
    for l in OrbvarList do
        ine := Infunc(l[1],l[2],l[3],l[4],l[5],5);
        if not ine in ineList then 
            Append(ineList,[ine]);
        fi;
    od;
    return ineList;
end;

Ingle5Allpermutations := function()
    local varList,G,OrbvarList,Dfinal,D;
    varList :=[1,2,3,4,5];
    G := SymmetricGroup(5);
    OrbvarList := Orbit(G,varList,OnTuples);
    Dfinal := [];
    D := InglPermutations(OrbvarList,In5_1);
    Append(Dfinal,D);
    D := InglPermutations(OrbvarList,In5_2);
    Append(Dfinal,D);
    D := InglPermutations(OrbvarList,In5_3);
    Dfinal:=Union(Dfinal,D);
    return Dfinal;
end;

## LoadPackage("ITCP");
########begin of subfunctions
#ncinstance:=[ [ [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 2, 3 ], [ 2, 4 ], [ 3, 4 ] ], 2, 4 ];
Permute_marginalAndJoin:=function(ncinstance)
	local A,numofVar,i;
	numofVar:=ncinstance[3];
	A:=[set2int([numofVar])+2^numofVar..set2int([numofVar])+2^(numofVar+1)-2];
	for i in [1..numofVar] do
		A[set2int([i])]:=set2int([i]);
	od;
	for i in [1..Size(ncinstance[1])] do
		A[set2int(ncinstance[1][i])]:=set2int([numofVar])+set2int(ncinstance[1][i]);
	od;
	return A;
end;

###permute clolumns of B
Permute_matrix_parallel:=function(B,A)
	local Bt,Bf,A1;
	Bt:=TransposedMat(B);
	Bt:=ShallowCopy(Bt);
	A1:=ShallowCopy(A);
	SortParallel(A1,Bt);
	Bf:=TransposedMat(Bt);
	return [Bf,A1];
end;

SubsetEntropy:=function(Set1, Set2, N) # Set1 := [1,2,3]; Set2 := [2,3,4,5]; N := 5;
	local Sub3, Sub5, Subtotal, JEntropy;
	Sub3 := Difference(Combinations(Set1),Combinations(Set1,1));
	Sub3 := Difference(Sub3,[[]]);
	Sub5 := Difference(Combinations(Set2),Combinations(Set2,1));
	Sub5 := Difference(Sub5,[[]]);
	Subtotal := Union(Sub3,Sub5);
	JEntropy:=[Subtotal,0,N];
	return JEntropy;
end;

MatrixRemoveColumn:=function(A,index)
	local AT,Af;
	AT:=TransposedMat(A);
	AT:=ShallowCopy(AT);
	Remove(AT,index);
	Af:=TransposedMat(AT);
	return Af;
end;
######## end of subfunctions

ProjLinear5 := function(InglFinal,DFZ24Final,Set1,Set2,N) #AX<=b
    local A, b, Shb,JEntropy,indi,APP,AP,G,number,rlist1;
    A := [];
    Append(A,InglFinal);
    Append(A,DFZ24Final);
    b := ZeroMutable([1..Length(A)]);
    Shb := GenShannonBounded(5);
    Append(A,Shb[1]);
    Append(b,Shb[2]);
    JEntropy:=SubsetEntropy(Set1, Set2, N);
	indi:=Permute_marginalAndJoin(JEntropy);
    APP := Permute_matrix_parallel(A,indi);
    AP := APP[1];
    G := Group( [ () ] );
    number:=N+Length(JEntropy[1]);
    rlist1:=symCHM( AP, b, [], number, G, OnProjPts, OnProjIneq, false );
    return rlist1;
end;

#####################Gamma_{1,2,3} cap Linear_{2,3,4,5}
GenShannonBounded:=function(n)
	local rlist,mtx,str,i,j,shineq,nset_i,ineq,pairs,p,Klist,K,nset_ij,greq,neq,A,b,sum2one,s;
	shineq:=[];
	# first add H(X_i|rest)>=0 type inequalities
	for i in [1..n] do
		nset_i:=[1..n];
		SubtractSet(nset_i,[i]);
		ineq:=ZeroMutable([1..2^n]);
		ineq[set2int([1..n])+1]:=1;
		ineq[set2int(nset_i)+1]:=-1;
		Append(shineq,[ineq]);
	od;
	# second, add I(X_i,X_j|X_K) >=0
	pairs:=Combinations([1..n],2);
	for p in pairs do
		nset_ij:=[1..n];
		SubtractSet(nset_ij,p);
		Klist:=Combinations(nset_ij);
		for K in Klist do
			ineq:=ZeroMutable([1..2^n]);
			ineq[set2int(Union(K,[p[1]]))+1]:=1;
			ineq[set2int(Union(K,[p[2]]))+1]:=1;
			ineq[set2int(Union(K,p))+1]:=-1;
			if Size(K)>0 then
				ineq[set2int(K)+1]:=-1;
			fi;
		Append(shineq,[ineq]);
		od;
	od;
	shineq:=-shineq;
	sum2one:=ZeroMutable([1..2^n-1]);
	for i in [1..2^n-1] do
		sum2one[i]:=1;
	od;
	A:=[];
	b:=[];
	for s in shineq do
		Append(A,[s{[2..Size(s)]}]);
		Append(b,[0]);
	od;
	Append(A,[sum2one]);
	Append(b,[1]);
	return [A,b];
end;

GenShannonUnBounded:=function(n)
# returns [A,b] s.t. Ax<=b are the inequalities
	local rlist,mtx,str,i,j,shineq,nset_i,ineq,pairs,p,Klist,K,nset_ij,greq,neq,A,b,sum2one,s;
	shineq:=[];
	# first add H(X_i|rest)>=0 type inequalities
	for i in [1..n] do
		nset_i:=[1..n];
		SubtractSet(nset_i,[i]);
		ineq:=ZeroMutable([1..2^n]);
		ineq[set2int([1..n])+1]:=1;
		ineq[set2int(nset_i)+1]:=-1;
		Append(shineq,[ineq]);
	od;
	# second, add I(X_i,X_j|X_K) >=0
	pairs:=Combinations([1..n],2);
	for p in pairs do
	nset_ij:=[1..n];
	SubtractSet(nset_ij,p);
	Klist:=Combinations(nset_ij);
	for K in Klist do
		ineq:=ZeroMutable([1..2^n]);
		ineq[set2int(Union(K,[p[1]]))+1]:=1;
		ineq[set2int(Union(K,[p[2]]))+1]:=1;
		ineq[set2int(Union(K,p))+1]:=-1;
		if Size(K)>0 then
			ineq[set2int(K)+1]:=-1;
		fi;
		Append(shineq,[ineq]);
		od;
	od;
	shineq:=-shineq;
	sum2one:=ZeroMutable([1..2^n-1]);
	for i in [1..2^n-1] do
		sum2one[i]:=1;
	od;
	A:=[];
	b:=[];
	for s in shineq do
		Append(A,[s{[2..Size(s)]}]);
		Append(b,[0]);
	od;
	#Append(A,[sum2one]);
	#Append(b,[1]);
	return [A,b];
end;


In4 := function(A,B,C,D,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandB(C,D,N);
    return ine;
end;

Ingl4Permutations := function(OrbvarList,Infunc)
    local ineList, l, ine;
    ineList := [];
    for l in OrbvarList do
        ine := Infunc(l[1],l[2],l[3],l[4],4);
        if not ine in ineList then 
            Append(ineList,[ine]);
        fi;
    od;
    return ineList;
end;

Ingle4Allpermutations := function()
    local varList,G,OrbvarList,Dfinal,D;
    varList :=[1,2,3,4];
    G := SymmetricGroup(4);
    OrbvarList := Orbit(G,varList,OnTuples);
    Dfinal := [];
    D := Ingl4Permutations(OrbvarList,In4);
    Append(Dfinal,D);
    return Dfinal;
end;

ConeAcapConeB := function(Set1,Set2,A,B) # example: Set1={1,2,3}, Set2={2,3,4,5} A_{1,2,3} \cap B_{2,3,4,5}
	local Uset,SubUset,SubSet1,SubSet2,Rset,Rindex,Kindex,o,baseine,i,ZeroindexA,ZeroindexB,AB,baseineA,baseineB,ine,newine,j;
	Uset := Union(Set1,Set2);
	SubUset := Difference(Combinations(Uset),[[]]);
	SubSet1 := Difference(Combinations(Set1),[[]]);
	SubSet2 := Difference(Combinations(Set2),[[]]);
	Rset := Difference(Difference(SubUset,SubSet1),SubSet2); #subsets that need to be remove
	Rindex := List(Rset, o -> set2int(o));  # indcies that need to be removed
	Kindex := Difference([1..2^Length(Uset)-1],Rindex);# indcies that need to be removed
	baseine := ZeroMutable([1..2^Length(Uset)-1]) - 1; # -1 indicates the positions need to be filled in
	for i in Rindex do
		baseine[i] := -2; # -2 indicates the posistions need to be removed
	od;
	ZeroindexA := Difference(Difference(SubUset,SubSet1),Rset);
	ZeroindexA := List(ZeroindexA, o -> set2int(o));
	baseineA := ShallowCopy(baseine);
	for i in ZeroindexA do
		baseineA[i] := 0; # 0 indicates the posistions need to be filled with 0
	od;
	ZeroindexB := Difference(Difference(SubUset,SubSet2),Rset);
	ZeroindexB := List(ZeroindexB, o -> set2int(o));
	baseineB := ShallowCopy(baseine);
	for i in ZeroindexB do
		baseineB[i] := 0; # 0 indicates the posistions need to be filled with 0
	od;
	AB := [];
	for ine in A do
		newine := ShallowCopy(baseineA);
		j := 1;
		for i in [1..Length(newine)] do 
			if newine[i] = -1 then
				newine[i] := ine[j];
				j := j + 1;
			fi;
		od;
		newine := newine{Kindex};
		Append(AB,[newine]);
	od;
	for ine in B do
		newine := ShallowCopy(baseineB);
		j := 1;
		for i in [1..Length(newine)] do 
			if newine[i] = -1 then
				newine[i] := ine[j];
				j := j + 1;
			fi;
		od;
		newine := newine{Kindex};
		Append(AB,[newine]);
	od;
	return AB;
end;

