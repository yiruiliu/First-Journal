set2int := function ( s )
    local  i, j;
    i := 0;
    for j  in s  do
        i := i + 2 ^ (Int( j ) - 1);
    od;
    return i;
end;

IAandB := function(A,B,N) # transform I(A;B) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A])] := 1;
    lin[set2int([B])] := 1;
    lin[set2int([A,B])] := -1;
    return lin;
end;

IAandBGivenC := function(A,B,C,N) # transform I(A;B|C) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,C])] := 1;
    lin[set2int([B,C])] := 1;
    lin[set2int([A,B,C])] := -1;
    lin[set2int([C])] := -1;
    return lin;
end;

IAandBGivenGandD := function(A,B,C,D,N) # transform I(A;B|C,D) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,C,D])] := 1;
    lin[set2int([B,C,D])] := 1;
    lin[set2int([A,B,C,D])] := -1;
    lin[set2int([C,D])] := -1;
    return lin;
end;

IAandBcapC := function(A,B,C,N) # transform I(A;B,C) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A])] := 1;
    lin[set2int([B,C])] := 1;
    lin[set2int([A,B,C])] := -1;
    return lin;
end;

IAcapBandCGivenD := function(A,B,C,D,N) # transform I(A,B;C|D) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,B,D])] := 1;
    lin[set2int([C,D])] := 1;
    lin[set2int([A,B,C,D])] := -1;
    lin[set2int([D])] := -1;
    return lin;
end;

IAcapBandCcapD := function(A,B,C,D,N) # transform I(A,B;C,D) into a linear queation of subset entropies with length 2^N-1 
    local lin;
    lin := ZeroMutable([1..2^N-1]);
    lin[set2int([A,B])] := 1;
    lin[set2int([C,D])] := 1;
    lin[set2int([A,B,C,D])] := -1;
    return lin;
end;



DFZ1 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(C,D,E,N) - IAandB(A,E,N);
    return ine;
end;

DFZ2 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) -  IAandBGivenC(A,B,C,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(A,D,E,N) - IAandB(B,E,N);
    return ine;
end;

DFZ3 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(B,E,C,N) - IAandBGivenGandD(A,D,C,E,N);
    return ine;
end;

DFZ4 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenGandD(A,B,D,E,N) - IAandBGivenC(B,D,C,N) - IAandBGivenGandD(A,E,C,D,N);
    return ine;
end;


DFZ5 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(B,D,C,N) - IAandBGivenC(A,E,D,N) -  IAandBGivenGandD(A,B,C,E,N) - IAandBGivenGandD(B,C,D,E,N);
    return ine;
end;

DFZ6 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(B,D,E,N) - IAandBGivenC(D,E,C,N) - IAandBGivenGandD(A,B,C,D,N) - IAandBGivenGandD(A,C,D,E,N);
    return ine;
end;

DFZ7 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(A,E,C,N) - IAandB(B,D,N) - IAandBGivenGandD(B,D,C,E,N) - IAandBGivenGandD(A,B,D,E,N);
    return ine;
end;

DFZ8 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := 2*IAandB(A,B,N) -  IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,B,E,N) - IAandB(C,D,N) - IAandBcapC(E,C,D,N);
    return ine;
end;


DFZ9 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := 2*IAandB(A,B,N) - IAandB(A,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,B,E,N) - IAandB(D,E,N) - IAcapBandCGivenD(D,E,B,C,N);
    return ine;
end;

DFZ10 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := 2*IAandB(A,B,N) - IAandBGivenC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandB(C,D,N) - IAandB(A,E,N) - IAandBGivenC(B,D,E,N) - IAandBGivenGandD(A,C,D,E,N);
    return ine;
end;

DFZ11 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandBGivenGandD(A,C,B,D,N) - IAandBcapC(A,C,E,N) - IAandBGivenGandD(A,B,D,E,N) - IAandBGivenGandD(B,D,C,E,N);
    return ine;
end;

DFZ12 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandB(A,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,D,E,N) - IAandBGivenC(B,E,C,N) - IAandBGivenGandD(A,C,B,E,N) - IAandBGivenGandD(C,E,B,D,N); 
    return ine;
end;


DFZ13 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandBGivenC(A,B,D,N) - IAandBcapC(A,C,E,N) - IAandBGivenGandD(B,D,C,E,N) - IAandBGivenGandD(A,C,B,E,N) - IAandBGivenGandD(C,E,B,D,N);
    return ine;
end;

DFZ14 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandB(A,D,N) - IAandBGivenC(B,E,D,N) - IAandBGivenGandD(A,B,C,E,N) - IAandBGivenGandD(A,C,B,D,N) - IAandBGivenGandD(A,C,D,E,N);
    return ine;
end;

DFZ15 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) - IAandB(A,D,N) - IAandBGivenC(B,E,D,N) - IAandBGivenC(A,C,E,N) - IAandBGivenGandD(A,B,C,D,N) - IAandBGivenGandD(A,C,B,D,N) - IAandBGivenGandD(B,D,C,E,N);
    return ine;
end;

DFZ16 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandBcapC(A,B,C,N) -  IAandBGivenGandD(A,B,C,D,N) - IAandBGivenGandD(A,C,B,D,N) - IAcapBandCGivenD(B,C,D,E,N) - IAandBGivenGandD(B,C,D,E,N) - IAandB(A,E,N);
    return ine;
end;

DFZ17 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine :=  IAcapBandCcapD(A,B,C,D,N) - IAandBcapC(D,A,B,N) - IAandBGivenGandD(A,D,B,C,N) - IAandBGivenGandD(B,D,A,C,N) - IAandBGivenGandD(A,C,B,E,N) - IAandBGivenGandD(B,C,A,E,N) - IAandBGivenGandD(A,B,D,E,N) - IAandBGivenC(C,E,D,N); 
    return ine;
end;

DFZ18 := function(A,B,C,D,E,N) #inequality <= 0
    local ine;
    ine := IAandB(A,B,N) + IAandB(A,C,N) - IAandB(B,C,N) - IAandBGivenC(A,B,D,N) - IAandBGivenC(A,C,D,N) - IAandBGivenC(B,D,E,N) - IAandBGivenC(C,D,E,N) - IAandB(A,E,N);
    return ine;
end;

