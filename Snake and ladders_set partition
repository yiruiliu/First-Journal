InitialOrbitData := function(G,SetofPartitions)
local delta1, py1, orbs, T1, o,i, orb, canonical, par;
delta1 := rec();
py1 := rec();
orbs := Orbits(G, SetofPartitions,OnSetsSets);
T1 := List( orbs, o -> Minimum(o));
Sort(T1);
T1 := List( T1, o -> [o]);
for i in [1..Length(orbs)] do
    orb := orbs[i];
    canonical := T1[i][1];
    for par in orb do
        delta1.(String([par])) := Stabilizer(G, par, OnSetsSets);
        py1.(String([par])) := RepresentativeAction(G, par, canonical, OnSetsSets);
    od;
od;
return [T1,delta1,py1];
end;

OrbitDataOnR := function(G,SetofPartitions)
local orbs,Transversal, o;
orbs := Orbits(G, SetofPartitions,OnSetsSets);
Transversal := List( orbs, o -> Minimum(o));
Sort(Transversal);
return Transversal;
end;

# RepresentativeAction #for transporter map phi
# Stabilizer #for stabilizer map delta
 
 PermuteSetsSetsSets := function(SetsSetsSets,g)
 local Plist,SetsSets,PSetsSets;
 Plist := [];
 for SetsSets in SetsSetsSets do
     PSetsSets := OnSetsSets(SetsSets,g);
     Append(Plist,[PSetsSets]);
 od;
 return Plist;
 end;
 
OnSetsSetsSets := function ( e, g )
return Set( List( e, function ( i )
          return OnSetsSets( i, g );
      end ) );
end;
 
 pyiplus1 := function(G,F,deltai,pyi,Sai) #F is a subset of size i+1
 local z,Z,t,S,GS,zt,orbzt,minzt,y,h;
 z := Maximum(F);
 Z := Difference(F,[z]);
 t := pyi.(String(Z));
 S := PermuteSetsSetsSets(Z,t);
 Sort(S);
 GS := deltai.(String(S));
 zt := OnSetsSets(z,t);
 orbzt := List(Orbit(GS, zt, OnSetsSets));
 minzt := Minimum(orbzt);
 h := RepresentativeAction(GS,zt,minzt,OnSetsSets);
 y := OnSetsSets(zt,h);
 if IsBound(Sai.(String([S,y]))) then
     return t*h*Sai.(String([S,y]));
 else
     return t*h;
 fi;
 end;
 

 
 TransversalNext:=function(Ti,deltai,pyi,G,SetofAllsetPartitions,j)
 #j := i + 1 
 # (Ti, pyi, deltai) is the input orbit datastructure
 # pyi and deltai are records
 local TNext,pyNext,deltaNext,Sai,R,GR,TRonGR,x,GRcapx,H,TRonH,r,dif,combined,str,t,S,rt,GS,orbrt,minrt,h,y,
 Hlist,SaiSy,Rcupx,F;
 TNext := [];
 pyNext := rec();
 deltaNext := rec();
 Sai := rec();
 for R in Ti do
     GR := deltai.(String(R));
     TRonGR := OrbitDataOnR(GR,Difference(SetofAllsetPartitions,R));
     for x in TRonGR do
         if not IsBound(Sai.(String([R,x]))) then
             GRcapx := Stabilizer(GR,x,OnSetsSets);
             H := GRcapx;
             TRonH := OrbitDataOnR(H,R);
             for r in TRonH do
                 dif := Difference(R,[r]);
                 combined := Union(dif,[x]);
                 str := String(combined);
                 t := pyi.(str);
                 S := PermuteSetsSetsSets(combined,t);
                 Sort(S);
                 rt := OnSetsSets(r,t);
                 GS := deltai.(String(S));
                 orbrt := List(Orbit(GS, rt, OnSetsSets));
                 minrt := Minimum(orbrt);
                 h := RepresentativeAction(GS,rt,minrt,OnSetsSets);
                 y := minrt;
                 if S = R and y = x then
                     H := ClosureGroup(H,t*h);
                 else
                     Sai.(String([S,y])) := Inverse(t*h);
                 fi;
             od;
             Rcupx := Union(R,[x]);
             Append(TNext,[Rcupx]);
             deltaNext.(String(Rcupx)) := H;
         fi;
     od;
 od;
 for F in IteratorOfCombinations(SetofAllsetPartitions,j) do
     pyNext.(String(F)) := pyiplus1(G,F,deltai,pyi,Sai);
 od;
 return [TNext, deltaNext,pyNext];
 end;

MeetsofTwoPartitions := function(P1,P2)
local Meet,set1,set2,interset;
Meet := [];
for set1 in P1 do
    for set2 in P2 do
        interset := Intersection(set1,set2);
        if not interset = [] then
            Append(Meet,[interset]);
        fi;
    od;
od;
return Meet;
end;

Minimalsubfunc := function(SetofP,atomsize)
local nPar,P1,i,Pnext;
nPar := Length(SetofP);
P1 := SetofP[1];
if nPar = 1 then
    if Length(P1) = atomsize then
        return true;
    else
        return false;
    fi;
else
for i in [2..nPar] do
    Pnext := SetofP[i];
    P1 := MeetsofTwoPartitions(P1, Pnext);
    if Length(P1) = atomsize then
        return true;
    fi;
od;
if;
reutrn false;
end;

MinimalityChecking := function(Tfinal,atomsize)
local TMinimal,SetofP;
TMinimal := [];
for SetofP in Tfinal do
    if Minimalsubfunc(SetofP,atomsize) then
        Append(TMinimal,[SetofP]);
    fi;
od;
return TMinimal;
end;
